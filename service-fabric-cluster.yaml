---
AWSTemplateFormatVersion: '2010-09-09'
Description: Service Fabric AutoScaling Cluster
Mappings:
  AWSInstanceType2Arch:
    c4.large:
      Arch: '64'
    c4.xlarge:
      Arch: '64'
    c4.2xlarge:
      Arch: '64'
    m4.large:
      Arch: '64'
    m4.xlarge:
      Arch: '64'
    m4.2xlarge:
      Arch: '64'
    m4.4xlarge:
      Arch: '64'
  ebs:
    ap-northeast-1:
      '64': ami-0567c164
    ap-southeast-1:
      '64': ami-a1288ec2
    ap-southeast-2:
      '64': ami-4d3b062e
    cn-north-1:
      '64': ami-d9f226b4
    eu-central-1:
      '64': ami-8504fdea
    eu-west-1:
      '64': ami-0d77397e
    sa-east-1:
      '64': ami-e93da085
    us-east-1:
      '64': ami-40d28157
    us-gov-west-1:
      '64': ami-19d56d78
    us-west-1:
      '64': ami-6e165d0e
    us-west-2:
      '64': ami-a9d276c9
  ephemeral:
    ap-northeast-1:
      '64': ami-839b3de2
    ap-southeast-1:
      '64': ami-7a288e19
    ap-southeast-2:
      '64': ami-dc3a07bf
    cn-north-1:
      '64': ami-5af22637
    eu-central-1:
      '64': ami-1279807d
    eu-west-1:
      '64': ami-d17836a2
    sa-east-1:
      '64': ami-d439a4b8
    us-east-1:
      '64': ami-3fabf828
    us-gov-west-1:
      '64': ami-69d66e08
    us-west-1:
      '64': ami-ff175c9f
    us-west-2:
      '64': ami-fbd5719b
Parameters:
  DiskType:
    AllowedValues:
      - ephemeral
      - ebs
    Default: ebs
    Description: Type of Disk to use ( ephemeral/ebs )
    Type: String
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the Service
      Fabric Cluster
    Type: AWS::EC2::KeyPair::KeyName
  SFClusterSize:
    Description: Number of nodes in the Service Fabric cluster
    Type: Number
    Default: '5'
  SFInstanceType:
    AllowedValues:
      - m4.large
      - m4.xlarge
      - m4.2xlarge
      - m4.4xlarge
      - c4.large
      - c4.xlarge
      - c4.2xlarge
    ConstraintDescription: 'must be valid instance type. '
    Default: m4.large
    Description: Type of EC2 instance for Service Fabric
    Type: String
  SFAvailabilityZones:
    Description: Availability Zones for the Service Fabric Cluster
    ConstraintDescription: 'valid array of Availability Zones for the stack region'
    Type: CommaDelimitedList
    Default: ''
Conditions:
  "HasAZs":
    !Not
      - !Equals
        - !Select ['0', !Ref SFAvailabilityZones]
        - ''
Resources:
  ClusterCommunication1:
    Type: AWS::EC2::SecurityGroupIngress  
    Properties:
      FromPort: "-1"
      GroupName:
        Ref: InstanceSecurityGroup
      IpProtocol: icmp
      SourceSecurityGroupName:
        Ref: InstanceSecurityGroup
      ToPort: "-1"
  ClusterCommunication2:
    Type: AWS::EC2::SecurityGroupIngress  
    Properties:
      FromPort: '1'
      GroupName:
        Ref: InstanceSecurityGroup
      IpProtocol: tcp
      SourceSecurityGroupName:
        Ref: InstanceSecurityGroup
      ToPort: '65356'
  ClusterCommunication3:
    Type: AWS::EC2::SecurityGroupIngress  
    Properties:
      FromPort: '1'
      GroupName:
        Ref: InstanceSecurityGroup
      IpProtocol: udp
      SourceSecurityGroupName:
        Ref: InstanceSecurityGroup
      ToPort: '65356'
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup  
    Properties:
      GroupDescription: Enable SSH access via port 22
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: '22'
          IpProtocol: tcp
          ToPort: '22'
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupOwnerId:
            Fn::GetAtt:
              - ElasticLoadBalancer
              - SourceSecurityGroup.OwnerAlias
          SourceSecurityGroupName:
            Fn::GetAtt:
              - ElasticLoadBalancer
              - SourceSecurityGroup.GroupName
  LaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration  
    Metadata:
      Comment1: Configure the bootstrap helpers to install service fabric
      AWS::CloudFormation::Init:
        configSets:
          sf-setup:
            - init-config
            - install
            - update-sf-config
          update:
            - update-sf-config
          default:
            -
              ConfigSet: sf-setup
        init-config:
          commands:
            pre-install:
              command: !Sub |
                sh -c 'echo "deb [arch=amd64] http://apt-mo.trafficmanager.net/repos/servicefabric/ trusty main" > /etc/apt/sources.list.d/servicefabric.list'
                apt-key adv --keyserver apt-mo.trafficmanager.net --recv-keys 417A0893

                sh -c 'echo "deb https://deb.nodesource.com/node_6.x xenial main" > /etc/apt/sources.list.d/nodesource.list'
                sh -c 'echo "deb-src https://deb.nodesource.com/node_6.x xenial main" >> /etc/apt/sources.list.d/nodesource.list'
                curl -s https://deb.nodesource.com/gpgkey/nodesource.gpg.key | apt-key add -

                bash -c 'debconf-set-selections <<< "servicefabric servicefabric/presenteula select false"'
                bash -c 'debconf-set-selections <<< "servicefabric servicefabric/accepted-eula-v1 select true"'
                bash -c 'debconf-set-selections <<< "servicefabric servicefabric/accepted-all-eula select true"'

                bash -c 'debconf-set-selections <<< "servicefabricsdkcommon servicefabricsdkcommon/presenteula select false"'
                bash -c 'debconf-set-selections <<< "servicefabricsdkcommon servicefabricsdkcommon/accepted-eula-v1 select true"'
                bash -c 'debconf-set-selections <<< "servicefabricsdkcommon servicefabricsdkcommon/accepted-all-eula select true"'
                apt update

                mv /etc/ssh/sshd_config /etc/ssh/sshd_config.bak
                cp /opt/microsoft/cfn/tools/sshd_config /etc/ssh/sshd_config
                service ssh restart
                systemctl enable cfn-hup.service
          files:
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update, post.remove, post.add
                path=Resources.LaunchConfig.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource LaunchConfig --configsets update
                runas=root
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackName}
                region=${AWS::Region}
              mode: "00400"
              owner: "root"
              group: "root"
            /etc/systemd/system/cfn-hup.service:
              content: !Sub |
                [Unit]
                Description=Cloud formation helper daemon

                [Service]
                ExecStart=/usr/bin/cfn-hup
                Restart=always
                RestartSec=10s
                Type=notify
                NotifyAccess=all
                TimeoutStartSec=120
                TimeoutStopSec=15

                [Install]
                WantedBy=multi-user.target
              mode: "00400"
              owner: "root"
              group: "root"
        install:
          commands:
            setup-sdks:
              command: !Sub |
                # render the template into the cluster config location
                /opt/microsoft/sdk/servicefabric/common/sdkcommonsetup.sh
                /opt/microsoft/sdk/servicefabric/java/sdkjavasetup.sh
                /opt/microsoft/sdk/servicefabric/csharp/sdkcsharpsetup.sh

                npm install -g azure-cli

                pip install boto3 jinja2
          packages:
            apt:
              docker.io: []
              python-pip: []
              nodejs: []
              openssh-server: []
              openssh-client: []
              servicefabricsdkcommon: []
              servicefabricsdkjava: []
              servicefabricsdkcsharp: []
              git: []
        update-sf-config:
          commands:
            render-restart-sf:
              command: !Sub |
                # render the template into the cluster config location
                python /opt/microsoft/cfn/tools/render-manifest.py ${AWS::StackId} ${AWS::Region} /opt/microsoft/cfn/tools/manifest-template.xml > /tmp/sf-manifest.xml
                mv /opt/microsoft/sdk/servicefabric/common/clustersetup/nonsecure/servicefabric-scalemin.xml /opt/microsoft/sdk/servicefabric/common/clustersetup/nonsecure/servicefabric-scalemin.xml.bak
                cp /tmp/sf-manifest.xml /opt/microsoft/sdk/servicefabric/common/clustersetup/nonsecure/servicefabric-scalemin.xml
                echo "###################   Updating with the following manifest   ###################"
                cat /tmp/sf-manifest.xml
                echo "###################   Running devclustersetup.sh   ###################"
                /opt/microsoft/sdk/servicefabric/common/clustersetup/devclustersetup.sh
    Properties:
      IamInstanceProfile:
        Ref: RootInstanceProfile
      ImageId:
        Fn::FindInMap:
          - Ref: DiskType
          - Ref: AWS::Region
          - Fn::FindInMap:
            - AWSInstanceType2Arch
            - Ref: SFInstanceType
            - Arch
      InstanceType:
        Ref: SFInstanceType
      KeyName:
        Ref: KeyName
      SecurityGroups:
        - Ref: InstanceSecurityGroup
      UserData:
        "Fn::Base64":
          !Sub |
            #! /bin/bash -xe
            apt update
            apt -y install python-setuptools
            easy_install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
            git clone https://github.com/devigned/cf-service-fabric.git /opt/microsoft/cfn
            cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource LaunchConfig
            cfn-signal -e $? --region ${AWS::Region} --stack ${AWS::StackName} --resource SFServerGroup
  ElasticLoadBalancer:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      AvailabilityZones: !If [HasAZs, !Ref SFAvailabilityZones, !GetAZs '']
      CrossZone: true
      Listeners:
        - LoadBalancerPort: 80
          InstancePort: 80
          Protocol: 'HTTP'
      HealthCheck:
        Target: "HTTP:80/"
        HealthyThreshold: 3
        UnhealthyThreshold: 5
        Interval: 30
        Timeout: 5
  SFServerGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: "PT15M"
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MaxBatchSize: '2'
        MinInstancesInService: '3'
        WaitOnResourceSignals: "true"
        PauseTime: "PT15M"
    Properties:
      AvailabilityZones: !If [HasAZs, !Ref SFAvailabilityZones, !GetAZs '']
      LoadBalancerNames:
        - Ref: ElasticLoadBalancer
      LaunchConfigurationName:
        Ref: LaunchConfig
      MaxSize: 20
      MinSize:
        Ref: SFClusterSize
  RolePolicies:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          -
            Action:
              - ec2:DescribeAvailabilityZones
              - ec2:DescribeInstanceStatus
              - ec2:DescribeInstances
              - ec2:DescribeRegions
              - ec2:DescribeTags
            Effect: Allow
            Resource: '*'
      PolicyName: root
      Roles:
        -
          Ref: RootRole
  RootInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: '/'
      Roles:
        - Ref: RootRole
  RootRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
      Path: '/'
